import streamlit as st
import pandas as pd
import numpy as np
from database import DatabaseManager

class Visualization:
    @staticmethod
    def mostrar_mapa_filtrado(db_file):
        # Inicializar la conexi√≥n con la base de datos SQLite
        db = DatabaseManager(db_file)

        # Obtener datos desde la base de datos
        data = db.fetch_data()

        if not data:
            st.warning("No hay datos disponibles para mostrar.")
            return

        # Crear DataFrame con las columnas necesarias
        columnas = [
            "ID", "id_categoria", "categoria_x", "subcategoria_x", "categoria_y", 
            "nombre", "anio", "estado", "subproceso_estado"
        ]

        # Convertir los datos en un DataFrame y manejar valores que falten
        df = pd.DataFrame(data)
        for columna in columnas:
            if columna not in df.columns:
                df[columna] = "Desconocido"  # Llena las columnas faltantes con un valor predeterminado
            else:
                df[columna] = df[columna].replace({np.nan: "Desconocido", None: "Desconocido"})  # Reemplaza NaN o None

        # Renombrar columnas para mostrarlas de forma clara en Streamlit
        df.rename(columns={
            "categoria_x": "Categor√≠a X",
            "subcategoria_x": "Subcategor√≠a X",
            "categoria_y": "Categor√≠a Y",
            "nombre": "Nombre del Manual",
            "anio": "A√±o",
            "estado": "Estado",
            "subproceso_estado": "Subproceso Estado"
        }, inplace=True)

        # Formatear correctamente el a√±o (eliminar la coma en valores num√©ricos)
        df["A√±o"] = df["A√±o"].astype(str).str.replace(",", "")

        # Reemplazar "Desconocido" en "Subproceso Estado" por "No Aplica"
        df["Subproceso Estado"] = df["Subproceso Estado"].replace("Desconocido", "No Aplica")

        # Eliminar las columnas "ID" y "id_categoria"
        df = df.drop(columns=["ID", "id_categoria"], errors='ignore')

        # üîπ Agregando filtros en el men√∫ lateral (sidebar)
        orden_categoria_y = [
            "Manuales Fundamentales del Ej√©rcito",
            "Manuales Fundamentales de Referencia del Ej√©rcito",
            "Manuales de Campa√±a del Ej√©rcito",
            "Manuales de T√©cnicas del Ej√©rcito",
            "Manuales de Educaci√≥n Militar",
            "Manuales de Mantenimiento del Ej√©rcito",
            "Manuales de Administrativo Funcional"
        ]

        # Ordenar las categor√≠as Y seg√∫n el orden personalizado
        categorias_y_ordenadas = sorted(
            df["Categor√≠a Y"].unique(),
            key=lambda x: orden_categoria_y.index(x) if x in orden_categoria_y else len(orden_categoria_y)
        )

        # üîπ Agregando filtros en el men√∫ lateral (sidebar)
        st.sidebar.header("üîç Filtros")
        
        # Mostrar Categor√≠a Y primero con orden personalizado
        categorias_y = st.sidebar.multiselect(
            "Categor√≠a Principal:",
            options=categorias_y_ordenadas,
            help="Seleccione la categor√≠a principal del manual"
        )

        # Resto de filtros
        categorias_x = st.sidebar.multiselect(
            "Categor√≠a:",
            sorted(df["Categor√≠a X"].unique())
        )
        
        subcategorias_x = st.sidebar.multiselect(
            "Subcategor√≠a:",
            sorted(df["Subcategor√≠a X"].unique())
        )

        # Separador visual
        st.sidebar.markdown("---")
        
        a√±os = st.sidebar.multiselect(
            "A√±o:",
            sorted(df["A√±o"].unique(), reverse=True)
        )
        
        estados = st.sidebar.multiselect(
            "Estado:",
            sorted(df["Estado"].unique())
        )

        # üîπ Aplicar filtros en orden
        if categorias_y:
            df = df[df["Categor√≠a Y"].isin(categorias_y)]
        if categorias_x:
            df = df[df["Categor√≠a X"].isin(categorias_x)]
        if subcategorias_x:
            df = df[df["Subcategor√≠a X"].isin(subcategorias_x)]
        if a√±os:
            df = df[df["A√±o"].isin(a√±os)]
        if estados:
            df = df[df["Estado"].isin(estados)]

        # üîπ Si no hay resultados tras los filtros, mostrar mensaje
        if df.empty:
            st.warning("No se encontraron datos con los filtros aplicados.")
            return

        # üîπ Mostrar la tabla filtrada
        st.write("### üó∫Ô∏è Mapa Doctrinario Filtrado")
        st.dataframe(df)

# Uso de la visualizaci√≥n
if __name__ == "__main__":
    db_file = "doctrina.db"  # Ruta al archivo de la base de datos SQLite
    Visualization.mostrar_mapa_filtrado(db_file)